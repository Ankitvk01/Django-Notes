1-> Link for topic wise index
https://docs.djangoproject.com/en/5.1/topics/
https://docs.djangoproject.com/en/5.1/ref/
*********************************

2-> Basic commands
(i) Command to create virtual environment:- python -m venv environment_name
(ii) Command to install Django:- pip install Django
(ii) To start Django project:- Django-admin startproject project_name
(iii) To create Django App:- python manage.py startapp app_name
********************************

3-> Basic points:
(i) register the app in installed_apps in settings.py to use models of that app
(ii) first run (python manage.py makemigrations) to
(iii) CharField (and its subclasses) require a max_length argument which specifies the size of the VARCHAR database field used to store the data.
(iv) Note that this is different than null. null is purely database-related, whereas blank is validation-related. If a field has blank=True, form validation will allow entry of an empty value. If a field has blank=False, the field will be required
(v) Note:
	A new migration is created each time the order of choices changes.(field for table having choices to select)
(vi) Commands to create records:
	>>> fruit = Fruit.objects.create(name="Apple")
	>>> fruit.name = "Pear"
	>>> p = Person(name="Fred Flintstone", shirt_size="L")
	>>> Fruit.objects.values_list("name", flat=True)
	<QuerySet ['Apple', 'Pear']>

4-> Relationships:
(i) To define a many-to-one relationship, use django.db.models.ForeignKey
(ii) 

5-> Some basic coomands
(i)  python manage.py sqlmigrate polls 0001 -> this command is used to print migration on screen without migrating it
(ii)  python manage.py check-> this is used to check issues without making any migartions

6-> # Create three choices.
>>> q.choice_set.create(choice_text="Not much", votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text="The sky", votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text="Just hacking again", votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).